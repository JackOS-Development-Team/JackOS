
class Shell {
	static String x;
	static String prompt;
	
	function void init() {
		let prompt = String.new(1);
		do prompt.appendChar(">");
	}
	
	function boolean run() {
		//variable declarations
		 
		var String temp;
		var boolean running;
		var String upper;
		var String lower1;
		var String lower2;
		var String lower3;
		var boolean parsingCommand
		var boolean parsingInput1;
		var boolean parsingInput2;
		var boolean parsingInput3;
		var int i;
		var boolean noInput1;
		var boolean noInput2;
		var boolean noInput3;
		
		
		
		let noInput1 = false;
		let noInput2 = false;
		let noInput3 = false;
		let i = 0;
		let parsingCommand = true;
		let parsingInput1 = true;
		let parsingInput2 = true;
		let parsingInput3 = true;
		let lower1 = String.new(32);
		let lower2 = String.new(32);
		let lower3 = String.new(32);
		let upper = String.new(32);
		let temp = String.new(128);
		let running = true;
		
		//the loop
		while (running) {
		
			let x = Keyboard.readLine(prompt);
			do temp.appendString(x);
			
			
			while (parsingCommand){
				while (~(i == 32)){
					do upper.appendChar(temp.charAt(i));
					let i += 1;
				}
				if (upper.charAtEnd() == 32 | null) {
					let parsingCommand = false;
					if (upper.charAtEnd == null) {
						let noInput1 = true;
					}
				}
			
			
			//pasrsing the inputs
			while (parsingInput1) {
				
				if (noInput1 == true) {
					let parsingInput1 = false;
				}
				
				while (~(i == 32)){
					do upper.appendChar(temp.charAt(i));
					let i += 1;
				}
				
				if (lower1.charAtEnd() == 32 | null) {
					let parsingInput1 = false;
					if (lower1.charAtEnd() == null) {
						let noInput2 = true;
					}
				}
			}
			
			while (parsingInput2) {
				
				if (noInput2 == true) {
					let parsingInput2 = false;
				}
				
				while (~(i == 32)){
					do upper.appendChar(temp.charAt(i));
					let i += 1;
				}
				
				if (lower2.charAtEnd() == 32 | null) {
					let parsingInput2 = false;
					if (lower2.charAtEnd() == null) {
						let noInput3 = true;
					}
				}
			}
			
			while (parsingInput3) {
				
				if (noInput3 == true) {
					let parsingInput3 = false;
				}
				
				while (~(i == 32)){
					do upper.appendChar(temp.charAt(i));
					let i += 1;
				}
				
				if (lower3.charAtEnd() == 32 | null) {
					let parsingInput3 = false;
				}
			}
			
			
			//seeing which commands
			if (String.compareLength(upper, "shutdown") == 0) {
				let running = false;
			}
			
			if (String.compare(upper, "echo") == 0) {
				do shLanguageFunctions.print(lower1);
			}
			if (String.compare(upper, "mk") == 0) {
				if (String.compare(lower1, "1") == 0) {
					do TxTFile.create(lower2, lower3);
				}
				if (String.compare(lower1, "2") == 0) {
					do BinFile.create(lower2, lower3);
				}
				if (String.compare(lower1, "3") == 0) {
					do LoxFile.create(lower2, lower3);
				}
			}
			if (String.compare(upper, "rm") == 0) {
				if (String.compare(lower1, "1") == 0) {
					do TxTFile.delete(lower2);
				}
				if (String.compare(lower1, "2") == 0) {
					do BinFile.delete(lower2, lower3);
				}
				
				if(String.compare(lower1, "3") == 0) {
					do LoxFile.delete(lower2);
				}
			}
			if (String.compare(upper, "dumpfh") == 0) {
				do File.dumpfh();
			}
			if (String.compare(upper, "cat") == 0) {
				if (lower1, "1") {
					do TxTFile.print(lower2);
				}
				if (String.compare(lower1, "2") == 0) {
					do BinFile.print(lower2);
				}
				if (String.compare(lower1, "3") == 0) {
					do ImgFile.print(lower2);
				}
			}
			if (String.compare(upper, "execute") == 0) {
				do process.exec(lower1);
			}
			if (String.compare(upper, "execCur") == 0) {
				do Main.main();
			}
			if (String.compare(upper, "loadRom") == 0) {
				do ROM.load();
			}
			if (String.compare(upper, "clearRom") == 0) {
				do ROM.clear();
			}
			if (String.compare(upper, "cd") == 0) {
				do File.cd(lower1);
			}
			if (String.compare(upper, "pwd") == 0) {
				do File.pwd();
			}
			if (String.compare(upper, "ls") == 0) {
				do File.list();
			}
			if (String.compare(upper, "jack") == 0) {
				//do Process.exec("jack");
			}
			if (String.compare(upper, "run") == 0) {
				do Process.exec(lower1);
			}
			if (String.compare(upper, "about") == 0) {
				do Output.printString("You are using the official JackOS V3");
			}
			if (String.compare(upper, "cls") == 0) {
				do Screen.clearScreen();
			}
			
			
			else {
				do Output.printString("Command Not Found");
			}
		}
		
		return;
	}
	
}