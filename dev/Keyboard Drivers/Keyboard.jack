/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(24576); // KEYBOARD_BASE
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char c;

        // Wait for key to be pressed
        while (Keyboard.keyPressed() = 0) {}

        let c = Keyboard.keyPressed();

        // Wait for key to be released
        while(~(Keyboard.keyPressed() = 0)) {}

        // Echo keypress to the screen
        do Output.printChar(c);
        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String s;
        var char c;

        do Output.printString(message);
        let s = String.new(64);

        while (true) {
            let c = Keyboard.readChar();

            // newLine
            if (c = 128) {
                do Output.println();
                return s;
            }

            // backSpace
            if (c = 129) {
                do s.eraseLastChar();
                do Output.backSpace();
            }

            if (~(c=128) & ~(c=129)) {
                do Output.printChar(c);
                do s.appendChar(c);
            }
        }
		do s.dispose();
        return s;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String s;
        let s = Keyboard.readLine(message);
        return s.intValue();
    }
	
	function Array readPage() {
		var Array s;
		var char x;
		var int i;
		var int curx;
		var int cury;
		
		let curx = 0;
		let cury = 0;
		let s = Array.new(1472);
		let x = String.new(64);
		let i = 0;
		
		do Output.moveCursor(curx, cury);
		
		while (true) {
		
			while (true) {
				let x = Keyboard.readChar();
				
				if (x == 129) {
					if (curx == 0) {
						do Output.moveCursor(curx + 64, cury - 1);
						let curx = curx + 64;
						let cury = cury - 1;
					}
					else{
						do Output.backSpace();
					}
				}
				if (x == 128) {
					do Output.moveCursor(0, cury + 1)
					let curx = 0;
					let cury = cury + 1;
				}
					
					
					let i = cury * 64 + curx;
					
					let s[i] = x;
					let i = i + 1;
			}
			}
		}
	}
}
