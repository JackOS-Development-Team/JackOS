class Disk {
    // array for flat disk memory
    static Array dmem;
	static Array ram;
	
    function void init() {
        let dmem = 524288;
		let ram = 0;
        return;
    }
    
    function int peek(int address) {
        return dmem[address];
    }
    
    function void poke(int address, int value) {
        let dmem[address] = value;
        return;
    }
}


    function Array findSegment(int size) {
        var Array segment;
        let segment = freeList;
        while (segment[1] < size) {
            let segment = segment[0];
        }
        return segment;
    }

    function int alloc() {
        var Array segment;
        var Array rest;
        var int restSize;
        var int xsize;

        let xsize = 16384 + 2;
        let segment = Memory.findSegment(xsize);
        if (segment = 0) {
            return -1;
        }
        let restSize = segment[1] - xsize;
        if ((restSize > xsize) | (restSize > 10)) {
            let rest = segment + xsize;
            let rest[0] = freeList;
            let rest[1] = restSize - 2;
            let freeList = rest;
            let segment[1] = size;
        }
        return segment + 2;
    }

    function void free(Array o) {
        var Array segment;
        let segment = o - 2;
        let segment[0] = freeList;
        let freeList = segment;
        return;
    }
	
	function boolean save(Array data, int diskblockstart, int diskblockend) {
		var int i;
		var int x;
		let x = diskblockstart
		let i = 0;

		while (i < diskblockend) {
			
			do Disk.poke[x, data[i]);
			let i = i + 1;
			let x = x + 1;
		}
		
		return true;
	}
	
	/**
		loads disk data into ram
	*/
	function boolean load(int start, int end, int diskblockstart, int diskblockend) {
		var Array temp;
		var int i;
		let i = start;
		let temp = Array.new(512);

		
		while (i < diskblockend) {
		
			let temp[i] = Disk.peek(i + diskblockstart);
			let i = i + 1;
		}
		
		while (i < diskblockend) {
			
			do Memory.poke[diskblockstart, temp[i]);
			let i = i + 1;
		}
		
		return true;
	}
	
	function boolean delete(int start, int end) {
		var int i;
		let i = start;
		
		while (i < end) {
			do Disk.poke(i, 0);
			let i = i + 1;
		}
	}
	
	function Array getBlock(int diskblockstart, int diskblockend) {
		var Array temp;
		var int i;
		let i = start;
		let temp = Array.new(512);

		
		while (i < diskblockend) {
		
			let temp[i] = Disk.peek(i + diskblockstart);
			let i = i + 1;
		}
		
		
		return temp;
	}
	
	function void printBlockChar(int diskblockstart, int diskblockend) {
		var Array temp;
		var int i;
		let i = start;
		let temp = Array.new(512);

		
		while (i < diskblockend) {
		
			let temp[i] = Disk.peek(i + diskblockstart);
			let i = i + 1;
		}
		
		while (i < diskblockend) {
			
			do Output.printChar(temp[i]);
			let i = i + 1;
		}
		
		return true;
	}
	
}
